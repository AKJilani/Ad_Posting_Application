# Flat Management Project Documentation

## Overview
The Flat Management project is a web application built using Flask. It allows users to register, log in, post classified ads, and view ads posted by others. This documentation provides step-by-step instructions to set up and run the project.

---

## Prerequisites
Before starting, ensure you have the following installed:
- Python 3.12 or later
- SQLite (comes pre-installed with Python)
- A code editor like Visual Studio Code

---

## Project Structure
```
Flat_Management/
├── app.py
├── conn.py
├── requirements.txt
├── run.py
├── db/
│   ├── flat.db
│   └── init_db.py
├── routes/
│   ├── __init__.py
│   ├── login_routes.py
│   ├── post_routes.py
│   ├── register_routes.py
├── static/
│   ├── css/
│   │   └── styles.css
│   └── js/
│       └── scripts.js
├── templates/
│   ├── base.html
│   ├── dashboard.html
│   ├── home.html
│   ├── login.html
│   ├── post_ad.html
|   |-- post_ad_apartment.html
│   └── register.html
```

---

## Setting Up the Project

### Step 1: Create a Project Folder
Create a folder named `Flat_Management` on your system.

### Step 2: Set Up a Virtual Environment
1. Open a terminal in the project folder and run:
   ```bash
   python -m venv venvFlat
   ```
2. Activate the virtual environment:
   - On Windows:
     ```bash
     venvFlat\Scripts\activate
     ```
   - On macOS/Linux:
     ```bash
     source venvFlat/bin/activate
     ```

### Step 3: Install Required Libraries
1. Create a `requirements.txt` file and add the following:
   ```
   flask
   ```
2. Install the dependencies:
   ```bash
   pip install -r requirements.txt
   ```

---

## File-by-File Instructions

### `app.py`
This is the main application file. It initializes the Flask app and registers the routes.

**Code:**
```python
from flask import Flask, render_template, request, redirect, session, url_for
from conn import get_connection

app = Flask(__name__)
app.secret_key = 'your_secret_key'

from routes import register_routes, login_routes, post_routes
app.register_blueprint(register_routes.bp)
app.register_blueprint(login_routes.bp)
app.register_blueprint(post_routes.bp)

@app.route('/')
def home():
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT ads.*, users.username FROM ads JOIN users ON users.id = ads.user_id ORDER BY date_posted DESC")
    ads = cursor.fetchall()
    conn.close()
    return render_template('home.html', ads=ads)
```

---

### `conn.py`
This file contains the database connection logic.

**Code:**
```python
import sqlite3

def get_connection():
    conn = sqlite3.connect('db/flat.db')
    conn.row_factory = sqlite3.Row  # For dictionary-style access
    return conn
```

---

### `run.py`
This file runs the Flask application.

**Code:**
```python
from app import app

if __name__ == '__main__':
    app.run(debug=True)
```

---

### `db/init_db.py`
This file initializes the database and creates the required tables.

**Code:**
```python
import sqlite3

conn = sqlite3.connect('db/flat.db')
cursor = conn.cursor()

# Create users table
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    Apartment_Type TEXT NOT NULL UNIQUE,
    Apartment_Number TEXT NOT NULL UNIQUE,
    Parking_Number TEXT NOT NULL UNIQUE,
    username TEXT NOT NULL UNIQUE,
    email TEXT NOT NULL UNIQUE,
    password TEXT NOT NULL
)
''')

# Create ads table
cursor.execute('''
CREATE TABLE IF NOT EXISTS ads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    price REAL,
    user_id INTEGER,
    date_posted TEXT DEFAULT CURRENT_TIMESTAMP
)
''')

conn.commit()
conn.close()

print("✅ Database and tables created successfully.")
```

---

### `routes/__init__.py`
This file initializes the routes module.

**Code:**
```python
# This file is intentionally left blank to mark the folder as a Python package.
```

---

### `routes/login_routes.py`
Handles user login and logout functionality.

**Code:**
```python
from flask import Blueprint, render_template, request, redirect, session, flash
from conn import get_connection

bp = Blueprint('login_routes', __name__)

@bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
        user = cursor.fetchone()
        conn.close()

        if user:
            session['user_id'] = user['id']
            session['username'] = user['username']
            return redirect('/dashboard')
        else:
            flash("Invalid username or password", "danger")

    return render_template('login.html')

@bp.route('/logout')
def logout():
    session.clear()  # Clear all session data
    flash('🔒 You have been logged out successfully.', 'info')
    return redirect('/login')  # Redirect to login or homepage
```

---

### `routes/post_routes.py`
Manages the dashboard and posting of new ads.

**Code:**
```python
from flask import Blueprint, render_template, request, redirect, session
from conn import get_connection

bp = Blueprint('post_routes', __name__)

@bp.route('/dashboard')
def dashboard():
    if 'user_id' not in session:
        return redirect('/login')

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM ads WHERE user_id=? ORDER BY date_posted DESC", (session['user_id'],))
    ads = cursor.fetchall()
    conn.close()

    return render_template('dashboard.html', ads=ads)

@bp.route('/post-ad', methods=['GET', 'POST'])
def post_ad():
    if 'user_id' not in session:
        return redirect('/login')

    if request.method == 'POST':
        title = request.form['title']
        desc = request.form['description']
        price = request.form['price']

        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO ads (title, description, price, user_id) VALUES (?, ?, ?, ?)",
                       (title, desc, price, session['user_id']))
        conn.commit()
        conn.close()
        return redirect('/dashboard')

    return render_template('post_ad.html')
```

---

### `routes/register_routes.py`
Handles user registration.

**Code:**
```python
from flask import Blueprint, render_template, request, redirect, flash
import sqlite3
from conn import get_connection

bp = Blueprint('register_routes', __name__)

@bp.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        apartment_type = request.form['apartment_type']
        apartment_number = request.form['apartment_number']
        parking_number = request.form['parking_number']
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']

        try:
            conn = get_connection()
            cur = conn.cursor()
            cur.execute('''
                INSERT INTO users 
                (Apartment_Type, Apartment_Number, Parking_Number, username, email, password)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (apartment_type, apartment_number, parking_number, username, email, password))
            conn.commit()
            flash('✅ Registered successfully!', 'success')
            return redirect('/login')
        except sqlite3.IntegrityError as e:
            if 'UNIQUE constraint failed' in str(e):
                flash('⚠️ Username or email already exists!', 'danger')
            else:
                flash('⚠️ Integrity error occurred!', 'danger')
            flash(f'⚠️ Error: {str(e)}', 'danger')
        finally:
            conn.close()

    return render_template('register.html')
```

### Templates

#### `templates/base.html`
This is the base template that provides the common structure for all pages.

**Code:**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Classified Ads{% endblock %}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark px-3">
        <a class="navbar-brand" href="/">Flat Management</a>
        <div class="ms-auto">
            {% if session.get('username') %}
                <span class="text-white me-2">Hi, {{ session.username }}</span>
                <a href="/dashboard" class="btn btn-outline-light btn-sm">Dashboard</a>
                <a href="/logout" class="btn btn-outline-light btn-sm">Logout</a>
            {% else %}
                <a href="/login" class="btn btn-outline-light btn-sm">Login</a>
                <a href="/register" class="btn btn-light btn-sm ms-1">Register</a>
            {% endif %}
        </div>
    </nav>

    <div class="container mt-4">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        
        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/scripts.js') }}"></script>
</body>
</html>
```

---

#### `templates/dashboard.html`
This template displays the user's dashboard with their ads.

**Code:**
```html
{% extends 'base.html' %}
{% block title %}Your Dashboard{% endblock %}
{% block content %}
<h2>My Ads</h2>
<a href="/post-ad" class="btn btn-primary mb-3">Post New Ad</a>
{% if ads %}
    <ul class="list-group">
        {% for ad in ads %}
            <li class="list-group-item">
                <strong>{{ ad.title }}</strong><br>
                {{ ad.description }}<br>
                <small>{{ ad.price }} BDT</small>
            </li>
        {% endfor %}
    </ul>
{% else %}
    <p>You have not posted any ads yet.</p>
{% endif %}
{% endblock %}
```

---

#### `templates/home.html`
This template displays all recent ads on the homepage.

**Code:**
```html
{% extends 'base.html' %}
{% block title %}All Ads{% endblock %}
{% block content %}
<h2>Recent Ads</h2>
<div class="row">
    {% for ad in ads %}
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">{{ ad.title }}</h5>
                    <p class="card-text">{{ ad.description }}</p>
                    <p><strong>Price:</strong> {{ ad.price }} BDT</p>
                    <p><small class="text-muted">Posted by {{ ad.username }} on {{ ad.date_posted }}</small></p>
                </div>
            </div>
        </div>
    {% else %}
        <p>No ads found.</p>
    {% endfor %}
</div>
{% endblock %}
```

---

#### `templates/login.html`
This template is for the login page.

**Code:**
```html
{% extends 'base.html' %}
{% block title %}Login{% endblock %}
{% block content %}
<h2>Login</h2>
<form method="POST" class="w-50 mx-auto">
    <div class="mb-3">
        <label>Username</label>
        <input type="text" name="username" class="form-control" required>
    </div>
    <div class="mb-3">
        <label>Password</label>
        <input type="password" name="password" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</form>
{% endblock %}
```

---

#### `templates/post_ad.html`
This template is for posting a new ad.

**Code:**
```html
{% extends 'base.html' %}
{% block title %}Post an Ad{% endblock %}
{% block content %}
<h2>Post a New Ad</h2>
<form method="POST" class="w-50 mx-auto">
    <div class="mb-3">
        <label>Title</label>
        <input type="text" name="title" class="form-control" required>
    </div>
    <div class="mb-3">
        <label>Description</label>
        <textarea name="description" class="form-control" required></textarea>
    </div>
    <div class="mb-3">
        <label>Price</label>
        <input type="number" name="price" step="0.01" class="form-control">
    </div>
    <button type="submit" class="btn btn-success">Post Ad</button>
</form>
{% endblock %}
```

---

#### `templates/register.html`
This template is for the registration page.

**Code:**
```html
{% extends 'base.html' %}
{% block title %}Register{% endblock %}
{% block content %}
<h2>Create an Account</h2>
<form method="POST" class="w-50 mx-auto">
    <div class="mb-3">
        <label>Apartment Type</label>
        <input type="text" name="apartment_type" class="form-control" required>
    </div>
    <div class="mb-3">
        <label>Apartment Number</label>
        <input type="text" name="apartment_number" class="form-control" required>
    </div>
    <div class="mb-3">
        <label>Parking Number</label>
        <input type="text" name="parking_number" class="form-control" required>
    </div>
    <div class="mb-3">
        <label>Username</label>
        <input type="text" name="username" class="form-control" required>
    </div>
    <div class="mb-3">
        <label>Email</label>
        <input type="email" name="email" class="form-control" required>
    </div>
    <div class="mb-3">
        <label>Password</label>
        <input type="password" name="password" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-success">Register</button>
</form>
{% endblock %}
```

### Static Files

#### `static/css/styles.css`
This file contains the CSS styles for the project.

**Code:**
```css
body {
    background-color: #f8f9fa;
    font-family: 'Segoe UI', sans-serif;
}

h2 {
    margin-bottom: 20px;
}

form {
    background-color: #fff;
    padding: 25px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.card {
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.alert {
    margin-top: 10px;
}
```

---

#### `static/js/scripts.js`
This file contains JavaScript for handling UI interactions.

**Code:**
```javascript
document.addEventListener("DOMContentLoaded", function () {
    // Auto-dismiss alerts after 3 seconds
    const alerts = document.querySelectorAll('.alert');
    if (alerts) {
        setTimeout(() => {
            alerts.forEach(alert => {
                alert.classList.remove('show');
                alert.classList.add('fade');
            });
        }, 3000);
    }

    // You can add form validation or confirmation here later
});
```
